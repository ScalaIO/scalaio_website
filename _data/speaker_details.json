[{
        "name": "Sanchit Khurana",
        "email": "sanchitkhuranask@gmail.com",
        "avatar": "https://papercallio-production.s3.amazonaws.com/uploads/user/avatar/83753/sanchit.jpeg",
        "location": "India",
        "bio": "Sanchit is an Auth0 Ambassador and an MCT (Microsoft Certified Trainer). He is a DevRel and a community evangelist. He is the Founder of the Developer community with over 4K+ members. He is leading many tech communities and conducting hackathons over the weekends. \r\n",
        "twitter": "genius_learner",
        "url": "https://www.linkedin.com/newsletters/6938401962476343296/",
        "organization": "Auth0",
        "shirt_size": "Men's 3XL",
        "talk_format": "Talk (45 minutes)",
        "title": "Demystifying JWT",
        "abstract": "Hi, I'm Sanchit Khurana, DevRel, community builder, and evangelist. Have you ever thought about how JWT can be used to track bits of information about a user in a very compact way and can be used in APIs for authentication purposes? No, it's okay catch me live at ScalaIO 2022 for my session.",
        "description": "Auth is one of the most crucial parts of any web application. Getting the auth correctly set up is a daunting task, but this talk will help you in understand the power of JSON Web Tokens or JWTs for short, and the problem it solves while also shedding light on the 5 common pitfalls.\r\n",
        "notes": "1. Who should attend?\r\n\r\nAnyone who has a bit of coding experience, knowledge of APIs, and a development/security background.\r\n\r\n2. Why should they attend?\r\n\r\nThey would learn, how JWT can be used to track bits of information about a user in a very compact way and can be used in APIs for authorization purposes.\r\n\r\n3. What will I tell them?\r\n\r\nThe talk would have the following points -\r\n\r\n- What is Token-Based Authentication? \r\n- What is a JWT? \r\n- Symmetrical Algorithm and Asymmetrical Algorithm \r\n- Why do we need a JSON Web Token?\r\n- How does JWT Authentication work?\r\n- 5 Common Pitfalls\r\n\r\n",
        "audience_level": "Intermediate",
        "tags": [
            "devops",
            "authentication",
            "JSON Web Tokens",
            "Security"
        ],
        "rating": 30.0,
        "state": "rejected",
        "confirmed": false,
        "created_at": "2022-07-12T17:05:33.463Z",
        "additional_info": null
    },
    {
        "name": "Aleksei Shamenev",
        "email": "coffius@gmail.com",
        "avatar": "https://secure.gravatar.com/avatar/62276b8e228c933b6a57aac76d9031bc?s=500",
        "location": "Unknown",
        "bio": "",
        "twitter": "",
        "url": "",
        "organization": "OnAir Entertainment",
        "shirt_size": "Men's S",
        "talk_format": "Talk (45 minutes)",
        "title": "Law abiding persistence",
        "abstract": "I'd like to show how to use prop-based testing in order to implement laws for a data access layer in an abstract way and make it reusable across projects. This talk should help listeners to understand how to use prop-based testing and provide another example of using related libraries in practice.",
        "description": "Scala and its technological stack provides lots of ways for reusing code. But why not to try to reuse tests? This is the idea behind the talk where I'd like to show Scala programmers how to use property based in order to implement laws for a data access layer in an abstract way and make it reusable across projects. This talk should help listeners to understand how to use prop-based testing and provide another example of using related libraries in practice. ",
        "notes": "Tech. stack for the talk:  \r\n\r\n* Scala 3\r\n* scalacheck\r\n* discipline",
        "audience_level": "Intermediate",
        "tags": [
            "Scala",
            "Persistence",
            "Laws",
            "ScalaCheck"
        ],
        "rating": 0.0,
        "state": "submitted",
        "confirmed": false,
        "created_at": "2022-08-16T12:41:38.477Z",
        "additional_info": null
    },
    {
        "name": "Franck Cussac",
        "email": "franck.cussac@gmail.com",
        "avatar": "https://secure.gravatar.com/avatar/0f34fc3f928a8818af46922b20e8276a?s=500",
        "location": "Unknown",
        "bio": "Développeur Spark, mon langage préféré est Scala pour des raisons évidentes. Quand j'étais petit on disait que j'étais souvent dans la lune, aujourd'hui je suis dans les nuages avec AWS.\r\nJe suis fan de tout ce qui est pratique de développement cloud native et j'essaye de pouvoir faire entrer Scala et Spark dans cet écosystème. C'est pas toujours évident mais c'est toujours passionnant.\r\n",
        "twitter": "",
        "url": "https://www.hymaia.com/blog",
        "organization": "Hymaïa",
        "shirt_size": "Men's M",
        "talk_format": "Talk (45 minutes)",
        "title": "Si, Scala est un BON CHOIX pour nos lambdas",
        "abstract": "Marre du boiler plate dans vos lambdas à cause de langages mal foutus comme NodeJS, Python ou Typescript \"parce que c'est plus performant\" ?\nVenez découvrir GraalVM et Quarkus et remettez à leur place tous ces fans de langages scriptés tout pétés.",
        "description": "À la sortie des Functions as a Service, les langages basés sur la JVM se sont fait mettre au placard car jugés \"trop lourdes\". Le temps de créer une JVM, allouer les ressources etc... laisse tombé l'autre lambda en nodeJS s'est déjà exécuté 10 fois.\r\n\r\nSauf que depuis, GraalVM et Quarkus sont sortis. Des outils qui permettent de créer des binaires natifs en java. Je ne vous referai pas le cours sur pourquoi cela réduit drastiquement le cold start, cela a déjà été fait et refait, mais sachez que les benchmarks sont unanimes : java est devenu plus performant sur tous les tableaux que Python ou JS.\r\n\r\nMais si en java c'est possible, ça devrait aussi l'être en Scala ? C'est ce que nous allons voir !\r\n\r\nVenez découvrir comment créer une lambda AWS en Scala avec GraalVM et Quarkus pour booster vos performances. Prises de têtes garanties, mais bon si vous êtes scalafist ça devrait pas vous faire peur.\r\n\r\n\r\nPour bien suivre il est conseillé de déjà savoir à quoi sert GraalVM et Quarkus et un peu leur fonctionnement. Le niveau intermédiaire a été sélectionné à cause de ce pré-requis.",
        "notes": "Bonjour,\r\ndepuis quelques mois je travaille sur une API et une CLI en Scala. Prétexte pour découvrir GraalVM et Quarkus. J'ai trouvé beaucoup de documentations et d'exemple pour le faire en Java et Kotlin, mais rien du tout en Scala et c'est dommage.\r\n\r\nJe \"m'amuse\" à me prendre quelques murs pour faire fonctionner tout ça, globalement c'est surtout du maven et de la résolution de compatibilité de plugins.\r\n\r\nFinalement pendant ce slot on ne fera pas beaucoup de Scala, mais on apprendra à pouvoir en vendre d'avantage dans nos projets et rien que pour ça vous devez me sélectionner :D ",
        "audience_level": "Intermediate",
        "tags": [
            "quarkus",
            "graalvm",
            "lambda",
            "aws"
        ],
        "rating": 0.0,
        "state": "submitted",
        "confirmed": false,
        "created_at": "2022-08-16T09:55:49.638Z",
        "additional_info": null
    },
    {
        "name": "Julien Truffaut",
        "email": "truffaut.julien@gmail.com",
        "avatar": "https://secure.gravatar.com/avatar/1d3a514afe5f1074ca145ec82eedf8fd?s=500",
        "location": "Unknown",
        "bio": "I am a backend engineer with more than 10 years of experience from start-ups to tech giants like Amazon.\r\nI love teaching the practical side of functional programming in Scala. I created my own online course at FP-Tower which is used by many companies to train junior and mid-level Scala developers.\r\nI am also the author of the popular open-source library Monocle, an optics library that helps functional Scala developers easily traverse, transform, and access deeply nested data structures.",
        "twitter": "JulienTruffaut",
        "url": "https://scalajobs.com/",
        "organization": "ScalaJobs",
        "shirt_size": "Men's M",
        "talk_format": "Talk (45 minutes)",
        "title": "Implicit parameters, when to use them (or not)!",
        "abstract": "Implicits values are one of the unique features of Scala but they are very complex and easy to misuse. So in this talk we will discuss various valid use cases and anti-pattern for implicits. \n\nYou don’t need to be a Scala expert, I will also present how implicit works at high level.",
        "description": "Implicits values are one of the unique features of Scala but they are very complex and easy to misuse. So in this talk we will discuss various valid use cases and anti-pattern for implicits. \r\n\r\nYou don’t need to be a Scala expert, I will also present how implicit works at high level.",
        "notes": "I can make this presentation in French or in English.",
        "audience_level": "All",
        "tags": [],
        "rating": 0.0,
        "state": "submitted",
        "confirmed": false,
        "created_at": "2022-08-09T12:31:58.325Z",
        "additional_info": null
    },
    {
        "name": "Pierre Dal-Pra",
        "email": "dalpra.pierre@gmail.com",
        "avatar": "https://secure.gravatar.com/avatar/59e05d9831ded2db656893dcf0f54651?s=500",
        "location": "Unknown",
        "bio": "Half Scala developer, half devops, often nicknamed as \"that sbt guy\" by my coworkers :)\r\nCurrently working at Stuart, I love working with in the FP ecosystem at large, from Scala (of course) to Elm, and of course Nix :)",
        "twitter": "pierre_dalpra",
        "url": "https://github.com/pdalpra",
        "organization": "Stuart",
        "shirt_size": "Men's M",
        "talk_format": "Talk (45 minutes)",
        "title": "Nix: FP for your packages and deployments",
        "abstract": "FP and especially immutability helps us everyday reason about the code we write.\nBut what about applying FP to package management ?\nIn this talk, I'll show you how Nix is an answer to that question and its benefits, from your development environments to configuring your OS.",
        "description": "Nix, with its rich package ecosystem and other projects like NixOs or NixOps, is one of the most active projects on Github.\r\n\r\nAt its core, its purely functional programming language and package management system helps you push the functional programming principles down to managing your development environments and even your OS or fleet of machines in production.\r\nIts concepts push reproducability far beyond what Docker or configuration management tools can offer, along the capacity to trivially rollback any change in a safe way.\r\n\r\nIn this talk, I will introduce you to the Nix language and concepts, and concrete uses cases that you could leverage today at work or for your personal use.",
        "notes": "There is no specific technical requirements to that talk, it is aimed at being an introduction to Nix and its concepts.\r\nI believe it's interesting to talk about Nix since people in Scala community picked up interest about it.\r\nOne notable example is Typelevel, who is providing Nix-based development enviroments for many of its projects and has essentially introduced the [Typelevel dev shell](https://github.com/typelevel/typelevel-nix).\r\n\r\nAlthough I'm no Nix expert, I've worked a lot with Nix for my personal use and have introduced Nix at work, to use it for our development environments.\r\n\r\nOn speaker experience : I often do internal talks and have been a speaker at a past ScalaIO conference.",
        "audience_level": "All",
        "tags": [
            "nix"
        ],
        "rating": 80.0,
        "state": "submitted",
        "confirmed": false,
        "created_at": "2022-08-05T09:26:10.794Z",
        "additional_info": null
    },
    {
        "name": "Francois Laroche",
        "email": "francois@laroche.dev",
        "avatar": "https://secure.gravatar.com/avatar/ee26c9793fe6ad446e5f7652b414f10c?s=500",
        "location": "Unknown",
        "bio": "Développeur scala depuis plusieurs années, je me passionne pour la performance des applications.\r\n\r\nJe suis actuellement lead tech chez Ingenico où je mets en place des applications haute disponibilité.",
        "twitter": "",
        "url": "https://github.com/larochef/",
        "organization": "Ingenico",
        "shirt_size": "Men's L",
        "talk_format": "Talk (45 minutes)",
        "title": "Des implicits à expliciter",
        "abstract": "Les implicites sont souvent vus comme un des moutons noirs de scala,  demandant une science de savoir quels imports mettre pour que le code compile.\nJe vous propose de revoir les différents types implicits ainsi que de regarder comment cats-effects a architecturé ses implicits pour enlever la magie.",
        "description": "",
        "notes": "",
        "audience_level": "All",
        "tags": [],
        "rating": 0.0,
        "state": "submitted",
        "confirmed": false,
        "created_at": "2022-08-03T08:30:57.402Z",
        "additional_info": null
    },
    {
        "name": "Magda Stożek",
        "email": "magda.stozek@gmail.com",
        "avatar": "https://secure.gravatar.com/avatar/7588ac7ae27e10c51fdf50ac74c3f897?s=500",
        "location": "Unknown",
        "bio": "Magda is a senior Scala developer at SoftwareMill. She's a fan of strongly-typed languages and enjoys trying to find \"the right way\" of doing things.\r\n\r\nBeing a passionate foreign languages learner, she wanted to become a translator. The nuances of interpretation help her today in translating the clients' and users' needs into code. She loves solving real-life problems, and creating features that bring value.\r\n\r\nMagda is an active contributor to SoftwareMill's organization and its unique culture. \r\nBeing a leader of Zielona Góra JUG, she's also a frequent speaker at meetups and conferences. \r\nIn her free time, she enjoys biking, gardening, and reading long books.",
        "twitter": "magdastozek",
        "url": "",
        "organization": "SoftwareMill",
        "shirt_size": "Women's M",
        "talk_format": "Talk (45 minutes)",
        "title": "Say goodbye to implicits - contextual abstractions in Scala 3",
        "abstract": "Scala 3 is out, but is it worth switching to? In my opinion, yes, because the authors addressed some important pain points, and for sure implicits are one of them! In Scala 2 they're used, confused and abused - let's see how much better it is in Scala 3 :)",
        "description": "Have you ever been confused by implicits in Scala? I most certainly have. I struggled to understand them at the beginning of my Scala journey, and to this day I trip over them regularly. It doesn't help that one keyword can be used for many different things  - defining Implicit parameters, implicit conversions, or type class instances. And sometimes it's so frustrating when your code doesn't compile because you can't remember the magical implicit import incantation that is needed (the problem also known as \"why does it work fine in that other file, but not here?!\"). \r\nScala 3 addresses a lot of the tricky bits in the language to make it clearer and easier to use, and luckily, implicits have also undergone a redesign. Well, to be precise... they're gone. But in their place, we're getting language constructs that do one thing and do it well. Please join me in welcoming the new keywords: \"given\" and \"using\", as well as context functions and extension methods. They're the new kids on the block to define our contextual abstractions, and they're here to make our code more expressive and easier to understand. Let's see them in action.",
        "notes": "My past presentations on YouTube:\r\n- Opaque types - Scala in the City 03.2021: https://www.youtube.com/watch?v=WUvUBJcANV8\r\n- Property-based testing in Scala - Scala Love in the city 02.2021 https://www.youtube.com/watch?v=gENnmmOjifA\r\n",
        "audience_level": "Intermediate",
        "tags": [
            "scala",
            "scala3",
            "implicits"
        ],
        "rating": 0.0,
        "state": "submitted",
        "confirmed": false,
        "created_at": "2022-07-29T20:05:35.928Z",
        "additional_info": null
    },
    {
        "name": "Daniel Beskin",
        "email": "daniel.beskin@gmail.com",
        "avatar": "https://secure.gravatar.com/avatar/cfea56c4aaf43e0ba31a5db5dca31935?s=500",
        "location": "Unknown",
        "bio": "Daniel is a somewhat functional developer who's convinced that the best way to learn something is to teach it.",
        "twitter": "",
        "url": "http://ncreep.github.io/language_perils/",
        "organization": "",
        "shirt_size": "Men's XL",
        "talk_format": "Talk (45 minutes)",
        "title": "Category Theory as a Tool for Thought",
        "abstract": "By rephrasing various FP idioms in the language of Category Theory, we can systematically tackle concepts by deconstructing them and deriving new ideas from them. That is, we can use Category Theory as a tool—a tool for thought.",
        "description": "The influence of Category Theory on statically-typed Functional Programming is undeniable. The liberal usage of terms such as \"Functor\" and \"Monad\" seems to prove this point. Category Theory is certainly a rich source of ideas, but one gets the impression that it is more than just that. Proficiency in Category Theory appears to enable software developers to explore new concepts and abstractions in a more far-reaching and systematic way.\r\n\r\nOn closer inspection, this should not come as a surprise. Category Theory can be seen as being about defining concepts by their relationships to one another. Sometimes, this allows finding and exploring new ideas by just \"following the arrows\", which is one of the many useful exploration techniques to be found in a Category Theorist's toolbox.\r\n\r\nIn this talk, I will try to demonstrate some of these exploration techniques by developing and analyzing examples from the world of Functional Programming phrased in the language of Category Theory. We will see how this enables us to systematically tackle concepts by deconstructing them and deriving new ideas from them. That is, we will use Category Theory as a tool—a tool for thought.",
        "notes": "The aim of the talk is to show the audience how it is possible to use Category Theory to explore the \"idea space\" and to discover new, and sometimes practically useful, ideas.\r\n\r\nThe talk will assume some basic proficiency with some of the more common abstractions in Functional Programming, such as, Functors and Monads.\r\n",
        "audience_level": "Intermediate",
        "tags": [
            "category theory"
        ],
        "rating": 0.0,
        "state": "submitted",
        "confirmed": false,
        "created_at": "2022-07-21T21:30:46.192Z",
        "additional_info": null
    },
    {
        "name": "Daniel Beskin",
        "email": "daniel.beskin@gmail.com",
        "avatar": "https://secure.gravatar.com/avatar/cfea56c4aaf43e0ba31a5db5dca31935?s=500",
        "location": "Unknown",
        "bio": "Daniel is a somewhat functional developer who's convinced that the best way to learn something is to teach it.",
        "twitter": "",
        "url": "http://ncreep.github.io/language_perils/",
        "organization": "",
        "shirt_size": "Men's XL",
        "talk_format": "Talk (45 minutes)",
        "title": "Make Illegal States Unrepresentable",
        "abstract": "Making illegal states unrepresentable is a very worthy ideal and strongly-typed Functional Programming is a great setting to help achieve this goal. Using a number of simple techniques, we will see how we can get closer to this ideal and the benefits that we can reap from it.",
        "description": "The ideal coined by Yaron Minsky, “make illegal states unrepresentable” is as simple as it is profound. The benefits of writing software that conforms to this maxim range from easier to comprehend code, to a reduced number of bugs (and a reduced number of tests to boot). This approach to writing code should be applicable in any setting, but strongly-typed Functional Programming is particularly well-suited to achieve the goal of reducing the number of illegal states of a system.\r\n\r\nIn this beginner-friendly talk, we will see a number of simple techniques that we can apply to our code to get ourselves closer to the ideal of making illegal states unrepresentable.",
        "notes": "",
        "audience_level": "All",
        "tags": [
            "types",
            "scala"
        ],
        "rating": 0.0,
        "state": "submitted",
        "confirmed": false,
        "created_at": "2022-07-21T21:29:24.887Z",
        "additional_info": null
    },
    {
        "name": "Agnès Maury",
        "email": "agnesm.dev@gmail.com",
        "avatar": "https://secure.gravatar.com/avatar/d911836f866e6ad986acc32e39c0e334?s=500",
        "location": "Unknown",
        "bio": "Développeuse passionnée et évangéliste SCALA, j'aime les chats 🐱, les jeux vidéos et le Japon. J'aime le travail bien fait et cherche toujours la meilleure façon de faire les choses sans réinventer la roue. Au quotidien, je m'applique à cultiver une vision du travail qui rime avec sens et performance. 🌟",
        "twitter": "maury_agnes",
        "url": "https://portfolio.agnesm.dev/",
        "organization": "Palo IT Nantes",
        "shirt_size": "Women's L",
        "talk_format": "Talk (45 minutes)",
        "title": "Ivre et au chômage, elle décide d'écrire un livre sur le Scala en plein Covid",
        "abstract": "REX sur l'écriture d'un premier livre : comment s'est arrivé ? pourquoi j'ai accepté ? par quelles étapes de dépression suis-je passée ?",
        "description": "REX sur l'écriture d'un premier livre : comment s'est arrivé ? pourquoi j'ai accepté ? par quelles étapes de dépression suis-je passée ? Je vais parler des relations avec l'équipe éditoriale, des délais, des étapes de la réalisation d'un livre du jour 1 avec les premières lignes jusqu'à la livraison. Je ne m'arrête pas là, on va parler de marketing, publicité, impression, sortie officielle du livre et pourquoi je ne referai plus ça.",
        "notes": "Ce talk était à l'origine donné sur 20 minutes. Je peux le rallonger ou prévoir une période de questions plus longue.",
        "audience_level": "All",
        "tags": [
            "scala",
            "rex",
            "livre"
        ],
        "rating": 55.0,
        "state": "submitted",
        "confirmed": false,
        "created_at": "2022-07-20T07:44:46.343Z",
        "additional_info": null
    },
    {
        "name": "NOUGUIER Olivier",
        "email": "olivier.nouguier@gmail.com",
        "avatar": "https://secure.gravatar.com/avatar/b2484ef33a94ebdcd47de7d3dff41515?s=500",
        "location": "Unknown",
        "bio": "Scala addict, JVM, js \u0026\u0026 SN\r\nAkka \u0026\u0026 ZIO fan boy - crypto newbie\r\nFather",
        "twitter": "oNouguier",
        "url": "https://cheleb.github.io/zio-pravega/",
        "organization": "Ledger",
        "shirt_size": "Men's M",
        "talk_format": "Talk (45 minutes)",
        "title": "ZIO Streaming connector for Pravega",
        "abstract": "pravega.io is an elastic, consistent and durable Streaming platform. ZIO pravega leverages ZIO Streaming to give full access to Stream (topic) and to KV tables.\nTransaction support and consistent concurrent write were implemented with \nZIO resources management, error handling and retries policies.",
        "description": "My favorite approach to a new framework, is to try to contribute to it ! Then I learn quickly the level of maturity of code and documentation, and more importantly the welcoming of the community and maintainers.\r\n\r\nZIO was not an exception, and clearly, is was a very instructive journey (and still it is).\r\n\r\n[zio-pravega](https://github.com/cheleb/zio-pravega/) allowed me to understand how ZIO Streaming compares to Akka Stream. [pravega](https://www.pravega.io) was chosen because I've already write the [alpakka connector](https://doc.akka.io/docs/alpakka/current/pravega.html).\r\n\r\nThis connector illustrate the power a ZIO resources management, error handling and retry policies to implements transactional stream writes and concurrent consistent optimistic write a Key Value Table  in a (few) snap of the fingers.\r\n\r\nI will present quickly ZIO and ZStream, and then how easy it is to extends to your needs.\r\n\r\n\r\n",
        "notes": "I'm really an enthusiast ZIO early adopters. I've discovers an over welcoming community.\r\nDeveloper experience with ZIO is by far the best of my life. I even find the time to write [documentation](https://cheleb.github.io/zio-pravega/)  !\r\n\r\nI will be able to adapt to new comer to ZIO or more intermediate level. ",
        "audience_level": "All",
        "tags": [
            "Scala",
            "ZIO",
            "Streaming"
        ],
        "rating": 85.0,
        "state": "submitted",
        "confirmed": false,
        "created_at": "2022-07-19T22:41:24.054Z",
        "additional_info": null
    }
]